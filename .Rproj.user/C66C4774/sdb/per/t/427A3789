{
    "contents" : "## ============================================================================\n##\n##      Functions for severe weather USA Map\n##      ************************************\n##      \n##      1. load_libraries................Load necessary libs\n##      2. load_data.....................Load weather data from csv\n##      3. group_data....................Group weather data per State\n##      4. find_main_risk................Return main risk for a state / month\n##      5. plot_weather_map..............Generate map of weather impact\n## ============================================================================\n\n##      [1]\n##      Load libraries\n## ======================================\nload_libraries <- function() {\n        library(dplyr)\n        library(grid)\n        library(ggplot2)\n        library(ggthemes)\n        library(maps)\n        library(Hmisc)\n}\n\n##      [2]\n##      Load severe weather data from csv\n## ======================================\nload_data <- function(fileName) {\n        dF <-\n                read.csv(\n                        fileName, sep = \",\", header = TRUE, stringsAsFactors = FALSE, strip.white =\n                                TRUE\n                )\n        ## create the health impact\n        dF$health_impact <- dF$FATALITIES + dF$INJURIES\n        \n        ## create the riskIndex\n        dF$riskIndex <- log(dF$DMG + 1)/2 + 3 * log(dF$health_impact + 1)\n        \n        ## return the dataframe of severe weather events\n        dF\n}\n\n##      [3]\n##      group data per state\n## ======================================\ngroup_data <- function(dF) {\n        # Group the data per grouping formula\n        dFgrouped <- dF %>% group_by(STATE)\n        dFgrouped <-\n                dFgrouped %>% summarise_each(funs(sum(., na.rm = TRUE)), DMG, health_impact, riskIndex)\n        ## Create the health impact variable and total damage\n        dFgrouped\n        \n}\n\n\n##      [4]\n##      return main risk for a state / month\n## ======================================\nfind_main_risk <-\n        function(dF, monthView = 8, stateView = \"texas\", variableView = \"riskIndex\") {\n                # get the state name\n                ## USA States data\n                states <-\n                        data.frame(STATE = state.abb, region = tolower(state.name))\n                stateView <-\n                        states[states$region == tolower(stateView),]$STATE\n                \n                subdF <- dF[dF$STATE == stateView & dF$month == monthView,]\n                subdFgrouped <- subdF %>% group_by(EVENT_TYPE)\n                subdFgrouped <-\n                        subdFgrouped %>% summarise_each(funs(sum(., na.rm = TRUE)), DMG, health_impact, riskIndex)\n                \n                if (variableView == \"DMG\") {\n                        subdFgrouped <- arrange(subdFgrouped, desc(DMG))\n                }\n                if (variableView == \"health_impact\") {\n                        subdFgrouped <- arrange(subdFgrouped, desc(health_impact))\n                        \n                }\n                if (variableView == \"riskIndex\") {\n                        subdFgrouped <- arrange(subdFgrouped, desc(riskIndex))\n                }\n                #subdFgrouped[1:3,]$EVENT_TYPE\n                capitalize(tolower(subdFgrouped[1,]$EVENT_TYPE))\n        }\n\n\n\n\n##      [5]\n##      plot severe weather event map / month\n## =======================================\nplot_weather_map <-\n        function(dF, eventType = \"FLOOD\", monthView = 8 , variableView = \"riskIndex\", mapTitle = \"Map of same events over the same month\") {\n                eventType <- toupper(eventType)\n                mapTitle <- paste(\"Map of\", eventType, \"for the month of\", month.name[monthView])\n                                \n                ## subset weather events for the month and the type\n                geodF <- dF[dF$month == monthView & dF$EVENT_TYPE == eventType,]\n                geodF <- group_data(geodF)\n                \n                ## create data frame of states and abreviations\n                states <-\n                        data.frame(STATE = state.abb, region = tolower(state.name))\n\n                ## merge with severe weather data\n                geodF <-\n                        merge(\n                                geodF, states, by.x = \"STATE\", by.y = \"STATE\", all.y = TRUE\n                        )\n\n                ## generate names for ggplot map\n                states_map <- map_data(\"state\")\n                cnames <-\n                        aggregate(\n                                cbind(long, lat) ~ region, data = states_map, FUN = function(x)\n                                        mean(range(x))\n                        )\n                cnames$angle <- 0                \n                \n                ## generate the choropleth\n                p1 <- ggplot(geodF, aes(map_id = region))\n                p1 <- p1 + geom_map(\n                                aes_string(fill = variableView, label = \"STATE\"), map = states_map, color =\n                                        \"black\"\n                        )\n                p1 <- p1 + expand_limits(x = states_map$long, y = states_map$lat)\n                p1 <- p1 + theme_few()\n                p1 <- p1 + geom_text(\n                                data = cnames, aes(\n                                        long, lat, label = region,\n                                        angle = angle, map_id = NULL\n                                ), size = 3.5\n                        )\n                p1 <- p1 + theme(\n                        legend.position = \"bottom\",\n                        axis.ticks = element_blank(),\n                        axis.title = element_blank(),\n                        axis.text =  element_blank()\n                )\n                p1 <- p1 + scale_fill_gradient(low = \"green\", high = \"red\", na.value = \"white\")\n                p1 <- p1 + guides(fill = guide_colorbar(barwidth = 10, barheight = .5))\n                p1 <- p1 + ggtitle(mapTitle)\n                print(p1)\n        }\n\n\n##      [4]\n##      return main risk for a state / month\n## ======================================\nfind_best_month <-\n        function(dF, stateView = \"texas\") {\n                # get the state name\n                ## USA States data\n                states <-\n                        data.frame(STATE = state.abb, region = tolower(state.name))\n                stateView <-\n                        states[states$region == tolower(stateView),]$STATE\n                \n                subdF <- dF[dF$STATE == stateView,]\n                subdFgrouped <- subdF %>% group_by(month)\n                subdFgrouped <-\n                        subdFgrouped %>% summarise_each(funs(sum(., na.rm = TRUE)), riskIndex)\n                subdFgrouped$riskIndex <- round(subdFgrouped$riskIndex)\n                subdFgrouped$month <- month.name[subdFgrouped$month]\n                subdFgrouped <- arrange(subdFgrouped, riskIndex)\n                message(str(subdFgrouped))\n                subdFgrouped\n                #subdFgrouped[1:3,]$EVENT_TYPE\n                #subdFgrouped[nrow(subdFgrouped),]$month\n        }\n\n\n\n##      [4]\n##      return main risk for a state / month\n## ======================================\nfind_best_state <-\n        function(dF, monthView = 8) {\n                # get the state name\n                ## USA States data\n                states <-\n                        data.frame(STATE = state.abb, region = tolower(state.name))\n                dF <- merge(dF, states, by = \"STATE\")\n\n                subdF <- dF[dF$month == monthView,]\n                subdFgrouped <- subdF %>% group_by(region)\n                subdFgrouped <-\n                        subdFgrouped %>% summarise_each(funs(sum(., na.rm = TRUE)), riskIndex)\n                subdFgrouped$riskIndex <- round(subdFgrouped$riskIndex)\n                #subdFgrouped$month <- month.name[subdFgrouped$month]\n                subdFgrouped <- arrange(subdFgrouped, riskIndex)\n                message(str(subdFgrouped))\n                names(subdFgrouped) <- c(\"State\", \"risk_index\")\n                subdFgrouped$State <- capitalize(as.character(subdFgrouped$State))\n                subdFgrouped\n                #subdFgrouped[1:3,]$EVENT_TYPE\n                #subdFgrouped[nrow(subdFgrouped),]$month\n        }\n",
    "created" : 1437271175984.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2922251398",
    "id" : "427A3789",
    "lastKnownWriteTime" : 1437273369,
    "path" : "~/ownCloud/Projets/Data-Science/coursera/9_Developping_data_products/Project-Assignement/severe-weather-usa-app/weather-shiny-app/R/severe-weather-functions.R",
    "project_path" : "weather-shiny-app/R/severe-weather-functions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}